{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PortfolioController","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","listOfPortfolios","getStorageData","newPortfolio","addPortfolio","bind","assertThisInitialized","deletePortfolio","addStock","deleteStock","handleChangePortfolio","updateStocks","getData","changeRate","getCurrency","event","setState","target","value","i","found","length","name","alert","stocks","currency","stockfield","quantityfield","deletefield","valuefield","dropdown","valueOfStocks","storageData","push","localStorage","setItem","JSON","stringify","portfolios","splice","portfolio","stockName","quantity","index","j","id","toUpperCase","isNaN","undefined","unitValue","newStock","parseFloat","toFixed","totalValue","updatedPortfolio","k","jsonHistory","getItem","retrievedObject","parse","data","updatedStock","axios","get","res","url","_this2","react_default","a","createElement","className","align","type","placeholder","onChange","onClick","map","App_Portfolio","key","portfolioChangeRate","Component","Portfolio","_this3","selectedOption","columns","Header","accessor","endDate","Date","startDate","setFullYear","getFullYear","labels","datasets","add","delete","handleChangeCurrency","showGraph","clearGraphData","handleChangeStartDate","handleChangeEndDate","_this4","dataset","fetch","then","json","result","date","toISOString","slice","close","randomColor","require","label","borderColor","spanGaps","error","document","getElementById","stock","selectedCurrency","_this5","es","style","height","dist_default","options","size","App_Remove","react_datepicker_es","selected","reactjs_popup_es","trigger","modal","closeOnDocumentClick","App_Graph","graphData","Remove","_this6","handleChangeOption","callDelete","_this7","Graph","react_chartjs_2_es","App","App_PortfolioController","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17e63e1b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactTable from \"react-table\";\nimport Dropdown from 'react-dropdown';\nimport \"react-table/react-table.css\";\nimport './App.css';\nimport axios from 'axios'\nimport 'react-dropdown/style.css'\nimport Popup from \"reactjs-popup\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport {Line} from 'react-chartjs-2';\n\n\n// Control all portfolios, their stocks, currency etc.\nclass PortfolioController extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      listOfPortfolios: this.getStorageData(),\n      newPortfolio: ''\n    };\n\n    this.addPortfolio = this.addPortfolio.bind(this);\n    this.deletePortfolio = this.deletePortfolio.bind(this);\n    this.addStock = this.addStock.bind(this);\n    this.deleteStock = this.deleteStock.bind(this);\n    this.handleChangePortfolio = this.handleChangePortfolio.bind(this);\n    this.getStorageData = this.getStorageData.bind(this);\n    this.updateStocks = this.updateStocks.bind(this);\n    this.getData = this.getData.bind(this);\n    this.changeRate = this.changeRate.bind(this);\n    this.getCurrency = this.getCurrency.bind(this);\n\n    // Update stocks every time constructor is called\n    this.updateStocks();\n  }\n\n  // Handle the change of text field where user can type the name of new portfolio\n  handleChangePortfolio(event) {\n    this.setState({\n      newPortfolio: event.target.value\n    });\n  }\n\n  addPortfolio() {\n    var i;\n    var found = false;\n    // Check if there is already portfolio with given name\n    for (i=0; i < this.state.listOfPortfolios.length; i++){\n      if (this.state.listOfPortfolios[i].name === this.state.newPortfolio) {\n        found = true;\n      }\n    }\n    if (this.state.listOfPortfolios.length === 10) {\n      alert(\"Couldn't add a new portfolio. Maximum number of portfolios is 10.\");\n    }\n    // If there already is portfolio with the same name, there will be message to the user that portfolio can't be added\n    else if (found || this.state.newPortfolio.length === 0){\n      alert(\"Couldn't add a new portfolio. You have to give a unique name to the new portfolio.\");\n    }\n    // Else the new portfolio will be added\n    else {\n      const newPortfolio = {\n        name: this.state.newPortfolio,\n        stocks: [],\n        changeRate: 1,\n        currency: \"EUR\",\n        stockfield: \"stock\" + this.state.newPortfolio,\n        quantityfield: \"quantity\" + this.state.newPortfolio,\n        deletefield: \"delete\" + this.state.newPortfolio,\n        valuefield: \"value\" + this.state.newPortfolio,\n        dropdown: \"dropdown\" + this.state.newPortfolio,\n        valueOfStocks: 0\n      };\n      var storageData = this.getStorageData();\n      storageData.push(newPortfolio);\n      localStorage.setItem(\"portfolios\", JSON.stringify(storageData));\n\n      this.setState({\n        listOfPortfolios: storageData,\n        newPortfolio: ''\n      });\n    }\n  }\n\n  deletePortfolio(name) {\n    let portfolios = this.state.listOfPortfolios;\n    for (var i=0; i<portfolios.length; i++){\n      if (portfolios[i].name === name){\n        portfolios.splice(i, 1);\n      }\n    }\n\n    localStorage.setItem(\"portfolios\", \"\");\n    localStorage.setItem(\"portfolios\", JSON.stringify(portfolios));\n\n    this.setState({\n      listOfPortfolios: portfolios\n    });\n  }\n\n  async addStock(portfolio, stockName, quantity) {\n    let portfolios = this.state.listOfPortfolios;\n    // Find the right portfolio\n    for (var i=0; i<portfolios.length; i++){\n      if (portfolios[i].name === portfolio) {\n        var index = i;\n      }\n    }\n    var changeRate = portfolios[index].changeRate;\n    if (portfolios[index].currency === \"EUR\") {\n      changeRate = 1;\n    }\n    var found = false;\n    // Check if there is already stock with given name\n    for (var j=0; j < portfolios[index].stocks.length; j++){\n      if (portfolios[index].stocks[j].id === stockName.toUpperCase()) {\n        found = true;\n      }\n    }\n    if (portfolios[index].stocks.length > 49) {\n      alert(\"Couldn't add a new stock. Maximum number of stocks is 50.\");\n    }\n    // If there already is stock with the same name, there will be message to the user that stock can't be added\n    else if (found){\n      alert(\"This stock is already in this portfolio.\");\n    }\n    else if (stockName.length === 0){\n      alert(\"Please give the name of the stock you want to add.\");\n    }\n    else if (isNaN(quantity)){\n      alert(\"Please give a number as a quantity of stocks.\");\n    }\n    else if (quantity < 1){\n      alert(\"Please give a number larger than 0 as a quantity of stocks.\");\n    }\n    // Else the new stock will be added\n    else {\n      var unitValue = await this.getData(stockName);\n      if (unitValue !== undefined) {\n        const newStock = {\n          \"id\": stockName.toUpperCase(),\n          \"unitValue\": parseFloat(unitValue * changeRate).toFixed(2),\n          \"quantity\": quantity,\n          \"totalValue\": (unitValue * quantity * changeRate).toFixed(2)\n        };\n        portfolios[index].stocks.push(newStock);\n        var updatedPortfolio = portfolios[index];\n        // Add stock value to the total value of all stocks\n        updatedPortfolio.valueOfStocks = (parseFloat(updatedPortfolio.valueOfStocks) + parseFloat(newStock.totalValue)).toFixed(2);\n        portfolios[index] = updatedPortfolio;\n\n        localStorage.setItem(\"portfolios\", \"\");\n        localStorage.setItem(\"portfolios\", JSON.stringify(portfolios));\n\n        this.setState({\n          listOfPortfolios: portfolios\n        });\n      }\n    }\n  }\n\n  deleteStock(portfolio, stockName) {\n    let portfolios = this.state.listOfPortfolios;\n    // Find the right portfolio\n    for (var i=0; i<portfolios.length; i++){\n      if (portfolios[i].name === portfolio) {\n        var j = i;\n      }\n    }\n    // Go through all stocks of the portfolio, find the one that needs to be deleted\n    for (var k=0; k<portfolios[j].stocks.length; k++) {\n      if (portfolios[j].stocks[k].id === stockName) {\n        var updatedPortfolio = portfolios[j];\n        // Substract the value of deleted stock from the value of all stocks\n        updatedPortfolio.valueOfStocks = (parseFloat(updatedPortfolio.valueOfStocks) - parseFloat(portfolios[j].stocks[k].totalValue)).toFixed(2);\n        portfolios[j] = updatedPortfolio;\n        // Delete stock using stock index\n        portfolios[j].stocks.splice(k, 1);\n      }\n    }\n    localStorage.setItem(\"portfolios\", \"\");\n    localStorage.setItem(\"portfolios\", JSON.stringify(portfolios));\n\n    this.setState({ listOfPortfolios: portfolios });\n  }\n\n  // Get data from localstorage\n  getStorageData() {\n    var jsonHistory = [];\n    if (localStorage.getItem('portfolios')) {\n      var retrievedObject = localStorage.getItem('portfolios');\n      jsonHistory = JSON.parse(retrievedObject);\n    }\n    return jsonHistory;\n  }\n\n  // Change currency between USD and EUR\n  async changeRate(portfolio, currency) {\n    var valueOfStocks = 0;\n    var portfolios = this.state.listOfPortfolios;\n    // Find the right portfolio\n    for (var i=0; i<portfolios.length; i++){\n      if (portfolios[i].name === portfolio) {\n        var index = i;\n      }\n    }\n    var data = await this.getCurrency();\n    var changeRate = data[\"rates\"][\"EUR\"];\n    if (currency === 'USD') {\n        changeRate = 1 / changeRate;\n    }\n    portfolios[index].changeRate = changeRate;\n    portfolios[index].currency = currency;\n    // Update currency to all stocks\n    for (var j=0; j<portfolios[index].stocks.length; j++) {\n      const updatedStock = {\n        \"id\": portfolios[index].stocks[j].id,\n        \"unitValue\": (portfolios[index].stocks[j].unitValue * portfolios[index].changeRate).toFixed(2),\n        \"quantity\": portfolios[index].stocks[j].quantity,\n        \"totalValue\": (portfolios[index].stocks[j].unitValue * portfolios[index].stocks[j].quantity * portfolios[index].changeRate).toFixed(2)\n      };\n      valueOfStocks = (parseFloat(valueOfStocks) + parseFloat(updatedStock.totalValue)).toFixed(2);\n      portfolios[index].stocks[j] = updatedStock;\n      localStorage.setItem(\"portfolios\", \"\");\n      localStorage.setItem(\"portfolios\", JSON.stringify(portfolios));\n      this.setState({\n        listOfPortfolios: portfolios});\n    }\n    portfolios[index].valueOfStocks = valueOfStocks;\n    localStorage.setItem(\"portfolios\", \"\");\n    localStorage.setItem(\"portfolios\", JSON.stringify(portfolios));\n    this.setState({ listOfPortfolios: portfolios })\n  }\n\n  // Get exhange rate\n  async getCurrency(){\n    const url = \"https://openexchangerates.org/api/latest.json?app_id=6438a59eedb743fea1710706c62f2edc\";\n    const res = await axios.get(url);\n    const { data } = await res;\n    return await data;\n  }\n\n  async updateStocks() {\n    var portfolios = this.state.listOfPortfolios;\n    // Go through all portfolios\n    for (var i=0; i<portfolios.length; i++) {\n      var valueOfStocks = 0;\n      // Go through all stocks\n      for (var j=0; j<portfolios[i].stocks.length; j++) {\n        var unitValue = await this.getData(portfolios[i].stocks[j].id);\n        const updatedStock = {\n          \"id\": portfolios[i].stocks[j].id,\n          \"unitValue\": (unitValue*portfolios[i].changeRate).toFixed(2),\n          \"quantity\": portfolios[i].stocks[j].quantity,\n          \"totalValue\": (unitValue*portfolios[i].stocks[j].quantity*portfolios[i].changeRate).toFixed(2)\n        };\n        valueOfStocks = (parseFloat(valueOfStocks) + parseFloat(updatedStock.totalValue)).toFixed(2);\n        portfolios[i].stocks[j] = updatedStock;\n        portfolios[i].valueOfStocks = valueOfStocks;\n        localStorage.setItem(\"portfolios\", \"\");\n        localStorage.setItem(\"portfolios\", JSON.stringify(portfolios));\n        this.setState({\n          listOfPortfolios: portfolios});\n      }\n    }\n  }\n\n  // Get stock value\n  async getData(id){\n    const url = \"https://api.iextrading.com/1.0/stock/\" + id + \"/price\";\n    try {\n      const res = await axios.get(url);\n      const {data} = await res;\n      return await data;\n    } catch(error) {\n      alert(\"Couldn't get the value of stock \" + id + \".\");\n      return\n    }\n  }\n\n  render() {\n  var portfolios = this.state.listOfPortfolios;\n\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col-10\" align=\"left\">\n            <input type=\"text\" placeholder=\"Portfolio name\" onChange={this.handleChangePortfolio} value={this.state.newPortfolio}/>\n            <input type=\"submit\" className=\"shadowbutton\" value=\"Add new portfolio\" onClick={this.addPortfolio}/>\n          </div>\n        </div>\n        <div className=\"row\">\n          {portfolios.map((portfolio, index) =>\n            <Portfolio key={portfolios[index].name}\n                       name={portfolios[index].name}\n                       stocks={portfolios[index].stocks}\n                       changeRate={this.changeRate}\n                       currency={portfolios[index].currency}\n                       deletePortfolio={this.deletePortfolio}\n                       addStock={this.addStock}\n                       deleteStock={this.deleteStock}\n                       stockfield={portfolios[index].stockfield}\n                       quantityfield={portfolios[index].quantityfield}\n                       deletefield={portfolios[index].deletefield}\n                       valuefield={portfolios[index].valuefield}\n                       dropdown={portfolios[index].dropdown}\n                       valueOfStocks={portfolios[index].valueOfStocks}\n                       portfolioChangeRate={portfolios[index].changeRate}/>)}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nclass Portfolio extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedOption: null,\n      columns : [\n        {\n          Header: \"Name\",\n          accessor: \"id\"\n        },\n        {\n          Header: \"Unit value \",\n          accessor: \"unitValue\"\n        },\n        {\n          Header: \"Quantity\",\n          accessor: \"quantity\",\n        },\n        {\n          Header: \"Total value \",\n          accessor: \"totalValue\"\n        }],\n      endDate: new Date(),\n      startDate: new Date(new Date().setFullYear(new Date().getFullYear() - 1)), // one year from now\n      labels: [],\n      datasets: []\n    };\n    this.add = this.add.bind(this);\n    this.delete = this.delete.bind(this);\n    this.handleChangeCurrency = this.handleChangeCurrency.bind(this);\n    this.showGraph = this.showGraph.bind(this);\n    this.clearGraphData = this.clearGraphData.bind(this);\n    this.handleChangeStartDate = this.handleChangeStartDate.bind(this);\n    this.handleChangeEndDate = this.handleChangeEndDate.bind(this);\n  }\n\n  showGraph(i) {\n      let labels = [];\n      let datasets = this.state.datasets;\n      var dataset = [];\n\n      var changeRate = 1;\n      if (this.props.currency === 'USD') {\n        changeRate = this.props.portfolioChangeRate;\n      }\n\n      // History of stock values from five years:\n      // const url = \"https://api.iextrading.com/1.0/stock/\" + this.props.stocks[i].id + \"/chart/5y\";\n      // History of stock values from one year:\n      const url = \"https://api.iextrading.com/1.0/stock/\" + this.props.stocks[i].id + \"/chart/1y\";\n      fetch(url)\n          .then(res => res.json())\n          .then(\n              (result) => {\n                if (result === {})\n                  alert(\"Couldn't get the data.\");\n                else {\n                  for (var j=0; j<result.length; j++) {\n                    // Choose only between the wanted start date and end date\n                    if (result[j].date >= this.state.startDate.toISOString().slice(0,10) && result[j].date <= this.state.endDate.toISOString().slice(0,10)) {\n                      labels.push(result[j].date);\n                      dataset.push(parseFloat(result[j].close)*parseFloat(changeRate));\n                    }\n                  }\n                  // Color of stock in the graph is random\n                  var randomColor = require('randomcolor');\n                  datasets.push({\n                    label: this.props.stocks[i].id,\n                    data: dataset,\n                    borderColor: randomColor(),\n                    spanGaps: true\n                  });\n\n                  this.setState({\n                    labels: labels,\n                    datasets: datasets\n                  });\n                }\n              }\n              ,\n              (error) => {\n                alert(\"Couldn't get the data.\");\n              });\n  }\n\n  // Set labels and datasets as empty\n  clearGraphData() {\n    this.setState({\n      labels: [],\n      datasets: []\n    });\n  }\n\n  // Call addStock-function with stock name and quantity which user has written\n  add() {\n    this.props.addStock(this.props.name, document.getElementById(this.props.stockfield).value, document.getElementById(this.props.quantityfield).value);\n    document.getElementById(this.props.stockfield).value = '';\n    document.getElementById(this.props.quantityfield).value = '';\n  }\n\n  // Call deleteStock-function\n  delete(stock){\n    this.props.deleteStock(this.props.name, stock);\n  }\n\n  // Call changeRate-function if user changes the currency-selection\n  handleChangeCurrency(selectedCurrency){\n    if (selectedCurrency.value !== this.props.currency){\n      this.props.changeRate(this.props.name, selectedCurrency.value);\n    }\n\n  // Change the start date if user changes it\n  }\n  handleChangeStartDate(date) {\n    this.setState({\n      startDate: new Date(date)\n    });\n  }\n\n  // Change the end date if user changes it\n  handleChangeEndDate(date) {\n    this.setState({\n      endDate: new Date(date)\n    });\n  }\n\n  render() {\n    return (\n        <div key={this.props.id} className=\"col-5 frameborder\" align=\"left\">\n          <div className=\"row\">\n            <div className=\"inline\"> <h2>{this.props.name}</h2> </div>\n            <div className=\"right\">\n              <button className=\"deletebutton right\" onClick={() => { this.props.deletePortfolio(this.props.name);}}>X</button>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <ReactTable\n                data={this.props.stocks.map(stock => stock)}\n                columns={this.state.columns}\n                className=\"-striped -highlight\"\n                style={{\n                  height: \"300px\",\n                }}\n            />\n            <div className=\"row\">\n              <br/>\n              Total value: {this.props.valueOfStocks} {this.props.currency}\n\n              <div className=\"right\">\n                <Dropdown className=\"dropdown\" options={[\"EUR\", \"USD\"]} value={this.props.currency} onChange={this.handleChangeCurrency}/>\n              </div>\n            </div>\n            <div className=\"row\">\n              <input type=\"text\" size=\"7\" id={this.props.stockfield} placeholder=\"Stock name\"/>\n              <input type=\"text\" size=\"5\" id={this.props.quantityfield} placeholder=\"Quantity\"/>\n              <button className=\"shadowbutton\" onClick={() => { this.add();}}>Add stock</button>\n              <div className=\"right\">\n                {<Remove stocks={this.props.stocks} delete={this.delete}/>}\n              </div>\n            </div>\n\n            <div className=\"row frameborder\">\n              <div className=\"row\"><b>Draw a graph from selected time frame (maximum is one year)</b> </div>\n\n              Start date\n              <DatePicker\n                  selected={this.state.startDate}\n                  onChange={this.handleChangeStartDate}/>\n              End date\n              <DatePicker\n                  selected={this.state.endDate}\n                  onChange={this.handleChangeEndDate}\n              />\n              <Popup\n                  trigger={<button className=\"shadowbutton\"> Graph </button>}\n                  modal\n                  closeOnDocumentClick\n              >\n                <span> {<Graph\n                    stocks={this.props.stocks}\n                    graphData={this.state.graphData}\n                    labels={this.state.labels}\n                    datasets={this.state.datasets}\n                    showGraph={this.showGraph}\n                    clearGraphData={this.clearGraphData}\n                    currency={this.props.currency}\n                /> } </span>\n              </Popup>\n            </div>\n            </div>\n          </div>\n    );\n  }\n}\n\nclass Remove extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedOption: null,\n      data: {\n        labels: this.props.labels\n      }\n    };\n    this.handleChangeOption = this.handleChangeOption.bind(this);\n    this.callDelete = this.callDelete.bind(this);\n  }\n\n  // Changes the selected option to which user selects\n  handleChangeOption(selectedOption){\n    this.setState({ selectedOption: selectedOption.value });\n  }\n\n  // Call delete-function and set selected option as null\n  callDelete(){\n    this.props.delete(this.state.selectedOption);\n    this.setState({ selectedOption: null })\n  }\n\n  render() {\n    return (\n        <div>\n          <div className=\"right\">\n            <Dropdown className=\"dropdown\" options={this.props.stocks.map(function (stock){ return stock.id})} value={this.state.selectedOption} onChange={this.handleChangeOption} placeholder=\"Select\" />\n            <input type=\"submit\" className=\"shadowbutton\" value=\"Remove\" onClick={() => { this.callDelete();}}/>\n          </div>\n        </div>\n    );\n  }\n}\n\n\nclass Graph extends Component {\n\n  async componentDidMount() {\n    // Clear the graph data\n    await this.props.clearGraphData();\n    // Get the graph data for all stocks of portfolio\n    for (var i=0; i<this.props.stocks.length; i++) {\n      this.props.showGraph(i);\n    }\n  }\n\n  render() {\n    var data = {\n      labels: this.props.labels,\n      datasets: this.props.datasets\n    };\n\n    return (\n      <div>\n        <h2>Performance of stocks in {this.props.currency}</h2>\n        <Line data={data}/>\n      </div>\n    );\n  }\n}\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"row\">\n          <PortfolioController />\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}